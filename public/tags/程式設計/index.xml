<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom" xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>程式設計 on </title>
    <link>https://www.renyou.tech/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/</link>
    <description>Recent content in 程式設計 on </description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-tw</language>
    <lastBuildDate>Sat, 02 Jul 2022 10:42:50 +0800</lastBuildDate><atom:link href="https://www.renyou.tech/tags/%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>請協助做好委派的工作</title>
      <link>https://www.renyou.tech/posts/go-delegate/</link>
      <pubDate>Sat, 02 Jul 2022 10:42:50 +0800</pubDate>
      
      <guid>https://www.renyou.tech/posts/go-delegate/</guid>
      <description>&lt;p&gt;之前介紹過 Prototype-based programming，Golang 利用委派 delegate 也能做到。&lt;/p&gt;
&lt;h2 id=&#34;委派的範例&#34;&gt;委派的範例&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Widget&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;struct&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Widget&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;string&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;func&lt;/span&gt; (&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt;) &lt;span style=&#34;color:#a6e22e&#34;&gt;Paint&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;[%p] - Label.Paint(%q)\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#f92672&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上面這段程式碼有幾個重點：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;定義了 struct，Widget&lt;/li&gt;
&lt;li&gt;跟 C 語言一樣，把 struct 放到另一個 struct 中，定義了 Label，把 Widget 委派進去&lt;/li&gt;
&lt;li&gt;Label 實作了 Paint() 方法&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;接著可以這樣使用：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;:=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;Label&lt;/span&gt;{&lt;span style=&#34;color:#a6e22e&#34;&gt;Widget&lt;/span&gt;{&lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;10&lt;/span&gt;}, &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;State&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#ae81ff&#34;&gt;100&lt;/span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;X=%d, Y=%d, Text=%s, Widget.X=%d\n&amp;#34;&lt;/span&gt;,  &lt;span style=&#34;color:#75715e&#34;&gt;// X=100, Y=10, Text=State, Widget.X=10&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Y&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Text&lt;/span&gt;,
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;		&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Widget&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;X&lt;/span&gt;)
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;fmt&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Printf&lt;/span&gt;(&lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;%+v\n%v\n&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;) &lt;span style=&#34;color:#75715e&#34;&gt;// {Widget:{X:10 Y:10} Text:State X:100}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	                                  &lt;span style=&#34;color:#75715e&#34;&gt;// {{10 10} State 100}&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;label&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;Paint&lt;/span&gt;() &lt;span style=&#34;color:#75715e&#34;&gt;// [0xc0000a81e0] - Label.Paint(&amp;#34;State&amp;#34;)&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;可以發現衝突的屬性名稱 X，需要手動處理。&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Sorry，Prototype 真的可以為所欲為</title>
      <link>https://www.renyou.tech/posts/prototype-based-programming/</link>
      <pubDate>Wed, 15 Jun 2022 10:57:38 +0800</pubDate>
      
      <guid>https://www.renyou.tech/posts/prototype-based-programming/</guid>
      <description>&lt;p&gt;之前在 &lt;a href=&#34;../object-oritend-programming&#34;&gt;物件導向的文章&lt;/a&gt; 中介紹了基於類別的物件導向設計，還有另一種特別的物件導向設計，被稱為原型程式設計 Prototype-based programming。沒有 class，直接使用物件，例如 JavaScript。&lt;/p&gt;
&lt;p&gt;與傳統物件導向的差別在：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;傳統基於類別的程式中，類別定義物件的布局、函式；介面則是「能使用」的物件，是基於某些特定類別的樣式。這種設計中，類別是行為、結構的集合，而對介面而言，其所屬類別的行為、結構都是相同的。所以區分規則首先是行為、結構(類別)，然後才是狀態(物件實體)。&lt;/li&gt;
&lt;li&gt;原型程式設計則認為不該先關注類別之間的關係，而是先關注一系列物件實體的行為，然後才將這些物件依照使用方式區分成相似的 prototype object，而不是分成類別。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;因此原型程式設計，鼓勵 runtime 進行原型修改：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;基於類別的語言裡，物件透過類別的建構子來實體化，物件實體是由類別設定的行為、布局建立&lt;/li&gt;
&lt;li&gt;原型程式設計裡要實體化物件有二種方法，一透過複製其他物件，二是擴展空物件&lt;/li&gt;
&lt;li&gt;基於類別的語言只有動態語言允許在 runtime 修改類別(PHP、Python、Ruby)&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;javascript-的原型觀念&#34;&gt;JavaScript 的原型觀念&lt;/h2&gt;
&lt;p&gt;透過 JavaScript 說明開頭的觀念。&lt;/p&gt;
&lt;p&gt;通常物件導向裡都要有 class，但原型程式的 JavaScript 認為不需要 class，直接在物件上改就好了。&lt;/p&gt;
&lt;p&gt;來看一個簡單範例：&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;foo&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color:#a6e22e&#34;&gt;two&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;2&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;var&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; {&lt;span style=&#34;color:#a6e22e&#34;&gt;three&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#ae81ff&#34;&gt;3&lt;/span&gt;};
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;每個物件都有一個原型屬性 __proto__。所以能把 foo 指派給 bar.__proto__，代表 bar 的原型是 foo。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;__proto__&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後，就可以在 bar 裡面取得 foo 的屬性。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-javascript&#34; data-lang=&#34;javascript&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;one&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// resolves to 1
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;three&lt;/span&gt;  &lt;span style=&#34;color:#75715e&#34;&gt;// resolves to 3
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;// Own properties shadow prototype properties
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#75715e&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;bar&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#e6db74&#34;&gt;&amp;#34;bar&amp;#34;&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#a6e22e&#34;&gt;foo&lt;/span&gt;.&lt;span style=&#34;color:#a6e22e&#34;&gt;name&lt;/span&gt;; &lt;span style=&#34;color:#75715e&#34;&gt;// unaffected, resolves to &amp;#34;foo&amp;#34;
&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這裡要先解釋一下 JavaScript 的二個概念， __proto__ 與 prototype，JavaScirpt 中物件有二種形式，一是 Object，二是 Function：&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>光看標題是學不會物件導向的</title>
      <link>https://www.renyou.tech/posts/object-oritend-programming/</link>
      <pubDate>Fri, 27 May 2022 10:20:05 +0800</pubDate>
      
      <guid>https://www.renyou.tech/posts/object-oritend-programming/</guid>
      <description>&lt;p&gt;既然點進來看內文了，這篇文章是介紹物件導向程式設計方法。&lt;/p&gt;
&lt;p&gt;之前在 &lt;a href=&#34;../functional-programming&#34;&gt;Functional programming 的文章&lt;/a&gt;介紹過，Functional programming 是透過組合各種函式來完成功能，函式是計算過程的抽象，但程式碼除了計算過程以外，還需要處理資料，也就是所謂的「狀態」，關於狀態的處理，就需要提到物件導向程式設計 (Object-oriented programming)。&lt;/p&gt;
&lt;p&gt;所謂物件指的是類別的實體，把物件當成程式的基本單位，並將資料封裝在其中，程式會被設計成一個個獨立的物件，每個物件都要能接受資料、處理資料、傳資料給其他物件，好比一個個小型的機器一樣，各自獨立，且彼此互相關聯。這與傳統的程式設計方法不同，傳統的想法是把程式設計成一系列對機器的指令、或者一系列函式的集合。&lt;/p&gt;
&lt;p&gt;目前物件導向被廣泛使用在大型專案中，優點是靈活性、可維護性；另外有部分人認為物件導向更容易分析、理解程式。&lt;/p&gt;
&lt;p&gt;物件導向領域有一本經典書籍，&lt;a href=&#34;https://www.amazon.com/Design-Patterns-Object-Oriented-Addison-Wesley-Professional-ebook/dp/B000SEIBB8&#34;&gt;Design Pattern&lt;/a&gt;，這本書介紹了 23 個設計模式，說的是二個觀念：&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;Program to an interface, not an implementation.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;呼叫者不需要知道資料型別、資料結構、算法的細節&lt;/li&gt;
&lt;li&gt;呼叫者不需要知道實作細節，只要知道提供什麼介面&lt;/li&gt;
&lt;li&gt;方便封裝、抽象、多型、動態綁定&lt;/li&gt;
&lt;li&gt;符合物件(導向)的特質&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;&lt;strong&gt;Favor object composition over class inheritance.&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;繼承需要暴露父類別的設計、實作給子類別&lt;/li&gt;
&lt;li&gt;父類別改變會造成子類別也要改變&lt;/li&gt;
&lt;li&gt;很多人有誤區，認為繼承是為了程式碼重用，實際上子類別仍需要重新實作很多父類別的方法，其實繼承更多是為了多型&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;範例一-組合物件&#34;&gt;範例一 組合物件&lt;/h2&gt;
&lt;p&gt;假設一個家具的系統，需求如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;四個物體：塑膠桌、塑膠椅、木頭桌、木頭椅&lt;/li&gt;
&lt;li&gt;四種屬性：價格、重量、密度、燃點&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;物件導向設計為下圖：
&lt;img loading=&#34;lazy&#34; src=&#34;https://www.renyou.tech/img/object-oritend-programming/object-composition-uml.png&#34; alt=&#34;object composition uml&#34;  /&gt;
&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;材質類別 Material，有密度、燃點屬性&lt;/li&gt;
&lt;li&gt;家具類別 Furniture，有價格、體積屬性&lt;/li&gt;
&lt;li&gt;Furniture 耦合了 Material，具體是木製、塑膠製，在建立家具物件時注入材質物件即可&lt;/li&gt;
&lt;li&gt;家具類能用自己的體積，與材質物件的密度，計算出重量&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;這樣設計的優點是&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;好理解，與現實世界對應&lt;/li&gt;
&lt;li&gt;材質類別可重複使用，前面有提到物件導向喜歡組合，而非繼承&lt;/li&gt;
&lt;li&gt;這個設計方式叫 Bridge pattern&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;Functional programming 強調動詞，而 Object-oriented programming 強調名詞，關注介面之間的關係，利用多型來達成不同的具體實作。&lt;/p&gt;
&lt;h2 id=&#34;範例二-組合功能&#34;&gt;範例二 組合功能&lt;/h2&gt;
&lt;p&gt;來看另一個例子，有個電商系統要處理不同折扣的訂單，有的原價、有的要打折。&lt;/p&gt;
&lt;p&gt;以 Java 為例，先寫一個介面，輸入原始價格，返回根據不同方式的折扣價。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;BillingStrategy&lt;/span&gt; {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	&lt;span style=&#34;color:#66d9ef&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;getActPrice&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;double&lt;/span&gt; rawPrice);
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;然後實作 BillingStrategy 介面&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Functional programming 到底是什麼鬼</title>
      <link>https://www.renyou.tech/posts/functional-programming/</link>
      <pubDate>Sun, 15 May 2022 21:21:19 +0800</pubDate>
      
      <guid>https://www.renyou.tech/posts/functional-programming/</guid>
      <description>&lt;p&gt;在&lt;a href=&#34;../generic-programming&#34;&gt;這次是對泛型 Generic programming 的思考&lt;/a&gt;文中，講了泛型的本質就是對型別的抽象，這篇文將介紹更抽象的程式設計方法，函式語言程式設計(Functional programming) 到底是甚麼鬼。&lt;/p&gt;
&lt;h2 id=&#34;函式語言程式設計&#34;&gt;函式語言程式設計&lt;/h2&gt;
&lt;p&gt;Functional programming 的理念來自數學的代數。&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;f(x)=3x^2+x+1
g(x)=2f(x)+4=6x^2+2x+6
h(x)=f(x)+g(x)=9x^2+3x+7
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;f(x) 是函式，g(x) 是把 f(x) 帶入並展開，h(x) 則是二個函式組成的二元函式。&lt;/p&gt;
&lt;p&gt;函式還能做遞迴，例如費式數列&lt;/p&gt;
&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;f(x)=f(x-1)+f(x-2)
&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;Functional programming 就像數學表達式，定義輸入資料和輸出資料的關係，是一種 mapping 的概念。&lt;/p&gt;
&lt;p&gt;Functional programming 的特點:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;stateless: 無狀態，重複執行的話，函式內部的資料是不變的&lt;/li&gt;
&lt;li&gt;immutable: 不改動輸入資料，每次都返回新的資料&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;優點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;沒有狀態，所以可以瘋狂並行(Parallelism)&lt;/li&gt;
&lt;li&gt;寫程式可以複製貼上，無狀態，不用擔心全域變數&lt;/li&gt;
&lt;li&gt;惰性求值&lt;/li&gt;
&lt;li&gt;確定性 f(x)=y 永遠都有同樣的結果&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;缺點&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;大量複製資料&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;functional-programming-的技巧&#34;&gt;Functional programming 的技巧&lt;/h2&gt;
&lt;ul&gt;
&lt;li&gt;first class function: 函數可以當變數用，可以傳遞、返回、嵌套&lt;/li&gt;
&lt;li&gt;recursive: 簡化程式碼，把複查的問題，能夠簡單的描述&lt;/li&gt;
&lt;li&gt;tail recursion: 避免 function stack 過多，需要編譯器有支援&lt;/li&gt;
&lt;li&gt;map、reduce&lt;/li&gt;
&lt;li&gt;pipeline: 把函式放到一個陣列、list 中，資料會依照順序被各個函式操作，最終得到結果&lt;/li&gt;
&lt;li&gt;high order function: 把函式當參數，把傳入的函式做封裝，然後返回封裝後的函式&lt;/li&gt;
&lt;li&gt;currying: 簡化函式參數，把函式多個參數分解成多個函式封裝，每層函式都返回一個函式去接收下一個參數&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;舉個例子說明 stateless，下面的程式是有狀態的，因為是對全域變數做 ++，多執行緒是不安全的。&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; cnt;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;increment&lt;/span&gt;() {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;	cnt&lt;span style=&#34;color:#f92672&#34;&gt;++&lt;/span&gt;;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;改成用參數傳遞，並行執行不需要鎖&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>這次是對 Generic programming 的思考</title>
      <link>https://www.renyou.tech/posts/generic-programming/</link>
      <pubDate>Sun, 01 May 2022 20:46:22 +0800</pubDate>
      
      <guid>https://www.renyou.tech/posts/generic-programming/</guid>
      <description>&lt;p&gt;程式寫了幾年後，有了些感性認識，無論是想寫的更好，或想學其他語言但覺得太多種學不完、也不知道怎麼學，只學了表面。&lt;/p&gt;
&lt;p&gt;如果你也有一樣的疑問，不妨瞭解下 Programming Paradigm 程式設計方法，透過程式語言的發展歷史，瞭解主流的幾種程式語言的特性，在比較與歸納中去思考程式設計的本質為何？從更高的維度去思考，就能提高程式設計能力。&lt;/p&gt;
&lt;p&gt;Programming Paradigm 將程式語言分成不同的設計風格，這系列文章會透過幾種語言(C、C++、Java、Go、Python、JavaScript)來了解「如何寫出更通用、可重用的程式」。&lt;/p&gt;
&lt;p&gt;這次是對泛型 Generic programming 的思考。&lt;/p&gt;
&lt;h2 id=&#34;c-語言&#34;&gt;C 語言&lt;/h2&gt;
&lt;p&gt;許多人第一個學習的是 C 語言，能做到微觀非常精細的操作，讓工程師自由控制底層、系統的細節，但在程式碼的組織、功能上有許多缺點，因此現在有許多 C Like 語言都是以 C 語言為基礎拓展，並改善 C 語言的問題。&lt;/p&gt;
&lt;p&gt;C 語言的特性&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;靜態弱型別：使用變數需要定義資料型別，但類型之間會自動轉型。&lt;/li&gt;
&lt;li&gt;不同變數可以用 struct 組合成新的資料型別。&lt;/li&gt;
&lt;li&gt;可以用 typedef 關鍵字定義資料型別的別名，達到變數資料型別的抽象。&lt;/li&gt;
&lt;li&gt;有變數的作用域、遞迴功能。&lt;/li&gt;
&lt;li&gt;參數以值傳遞，也可以傳指標。&lt;/li&gt;
&lt;li&gt;透過指標能對記憶體做底層控制，但也增加了寫作的複雜度。&lt;/li&gt;
&lt;li&gt;編譯預處理可以讓編譯更有彈性，做跨平台。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c-語言的-swap&#34;&gt;C 語言的 swap&lt;/h2&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; style=&#34;color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4;&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;&lt;span style=&#34;color:#66d9ef&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#a6e22e&#34;&gt;swap&lt;/span&gt;(&lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; x, &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt;&lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt; y) {
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#66d9ef&#34;&gt;int&lt;/span&gt; tmp &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;x &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;    &lt;span style=&#34;color:#f92672&#34;&gt;*&lt;/span&gt;y &lt;span style=&#34;color:#f92672&#34;&gt;=&lt;/span&gt; tmp;
&lt;/span&gt;&lt;/span&gt;&lt;span style=&#34;display:flex;&#34;&gt;&lt;span&gt;}
&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;這段程式重點有二個&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;傳指標是因為函式的參數 x、y 只是引數的 copy，函式內修改參數無法影響外部的引數。&lt;/li&gt;
&lt;li&gt;問題在於這函式只適用於 int，double、float 都不能用，這是靜態類型語言面臨的問題。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;資料型別&#34;&gt;資料型別&lt;/h2&gt;
&lt;p&gt;透過 swap() 能發現，靜態類型的語言要做到泛型，首先要處理的是資料型別的問題&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;泛型程式設計，對於靜態類性語言首先要做的就是抽象資料型別。&lt;/li&gt;
&lt;li&gt;C 語言的編譯器會做自動轉型，讓寫程式方便一點，也可以做到一點點的泛型。&lt;/li&gt;
&lt;li&gt;C 語言做轉型，可能出現問題；例如一個 double 類型陣列，a[2] 尋址公式為 a + sizeof(double) * 2，如果轉成 int 陣列，尋址公式變成 a + sizeof(int) * 2，於是訪問到不同記憶體位址而出現錯誤。&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&#34;c-語言的泛型&#34;&gt;C 語言的泛型&lt;/h2&gt;
&lt;p&gt;要讓 swap() 能通用各種型別，C 語言可以透過 void* 做到泛型&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
